<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Xcode Source Editor Extension]]></title>
    <url>%2Funcategorized%2FXcode-Source-Editor-Extension%2F</url>
    <content type="text"><![CDATA[开发环境:Xcode 9 开发语言:Swift 4 Demo gif: 1. 新建app1.1 创建macOS app 1.2 app取名和选择语言 1.3 新建Target 1.4 选择xcode source editor extension 1.5 Target取名 1.6 选择Activate 1.7 配置Team[如果已经配置可忽略,否则必须配置] 2个TARGETS的Team需要一致 1.8 显示 选择新建的Target-&gt; 运行 选择Xcode运行 会显示一个新的灰色的Xcode,选择一个工程运行 选中Editor会显示插件名，只是个空插件 2. 关于xcode source editor extension2.1 SourceEditorExtension.swift func extensionDidFinishLaunching() :在extension启动的时候会被调用，刚加载好插件但还未点击插件按钮时，可以执行某些准备工作。 commandDefinitions: [[XCSourceEditorCommandDefinitionKey: Any]] : 返回字典类型的数组，可以为每个插件重写名字、标识符和自定义类名等信息，设置后会覆盖Info.plist文件中对应的NSExtension12345678var commandDefinitions: [[XCSourceEditorCommandDefinitionKey: Any]] &#123; // If your extension needs to return a collection of command definitions that differs from those in its Info.plist, implement this optional property getter. return [ [.classNameKey : "插件.SourceEditorCommand", // 格式:Target名.Command文件名 .identifierKey : "com.Devin.XcodeSourceEditorDemo.SourceEditorCommand", // 格式: BundleIdentifier.任意字符串 .nameKey : "UITableView"] ]&#125; 2.2 SourceEditorCommand.swift 在这个文件里面可以实现extension的相关逻辑 perform(with:completionHandler:) : 在用户启动你的extension的时候被调用 XCSourceEditorCommandInvocation对象包含了一个buffer属性，这个属性主要是用来访问当前文件的源代码,和光标选中范围 completionHandler将会以参数为nil进行调用，告诉Xcode命令执行完毕。否则将会给它传递一个Error实例。 3. info.plist 配置 4. 示例代码4.1 获取当前光标所在的类名1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/// 获取文件名 /// 规则：1.根据光标所在的位置，获取距离光标上一行代码，最近的`class` /// 2.如果没有获取到。则获取第二行 `xxxx.swift` 文本 /// 3.如果上述都不成立，则为`nil` /// - Parameters: /// - selection: XCSourceTextRange /// - comment: [String] /// - Returns: String? fileprivate func fileName(selection:XCSourceTextRange, comment: [String]) -&gt; String? &#123; let secondLine = comment[1] var filename:String? filename = selectionFileName(selection: selection, comment: comment).className ?? headerFileName(fromFileNameComment: secondLine) return filename &#125; // "// Classname.swift" -&gt; "Classname" fileprivate func headerFileName(fromFileNameComment comment: String) -&gt; String? &#123; let comment = comment.trimmingCharacters(in: .whitespacesAndNewlines) let commentPrefix = "//" guard comment.hasPrefix(commentPrefix) else &#123; return nil &#125; let swiftExtensionSuffix = ".swift" guard comment.hasSuffix(swiftExtensionSuffix) else &#123; return nil &#125; let startIndex = comment.index(comment.startIndex, offsetBy: commentPrefix.characters.count) let endIndex = comment.index(comment.endIndex, offsetBy: -swiftExtensionSuffix.characters.count) return comment[startIndex..&lt;endIndex].trimmingCharacters(in: .whitespacesAndNewlines) &#125; fileprivate func selectionFileName(selection:XCSourceTextRange, comment: [String]) -&gt; (className:String?, classLine:Int) &#123; var ownfileName:String? var classIndex = 0 // 获取当前光标上面所在最近的类 guard selection.end.line &gt; 0 else &#123; return (nil,classIndex) &#125; let selectionEnd = selection.end.line - 1 guard selectionEnd &lt; comment.count else &#123; return (nil,classIndex) &#125; let selectionBefore = comment[0...selectionEnd] for (index,element) in selectionBefore.reversed().enumerated() &#123; if element.hasPrefix(classString) &#123; classIndex = selectionBefore.count - index // 去掉 classString var newElement = element.replacingOccurrences(of: classString, with: "") // 去掉 \n newElement = newElement.trimmingCharacters(in: .whitespacesAndNewlines) // 去掉 空格 newElement = newElement.replacingOccurrences(of: " ", with: "") let nsNewElement = newElement as NSString if newElement.contains(":") &#123; let getRange = nsNewElement.range(of: ":") ownfileName = nsNewElement.substring(to: getRange.location) &#125;else if newElement.contains("&#123;") &#123; let getRange = nsNewElement.range(of: "&#123;") ownfileName = nsNewElement.substring(to: getRange.location) &#125;else &#123; ownfileName = newElement &#125; break &#125; &#125; return (ownfileName,classIndex) &#125; 4.2 代码文本12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455fileprivate func insertSelectionCode() -&gt; String &#123; let result = """ \t\tmainTableView.register(&lt;#T##cellClass: AnyClass?##AnyClass?#&gt;, forCellReuseIdentifier: &lt;#T##String#&gt;) \t\tmainTableView.register(&lt;#T##nib: UINib?##UINib?#&gt;, forCellReuseIdentifier: &lt;#T##String#&gt;) \t\tview.addSubview(mainTableView) """ return result &#125; fileprivate func insertVarCode() -&gt; String &#123; let result = """ \n \tlazy var mainTableView:UITableView = &#123; \t\tvar mainTableView = UITableView(frame: &lt;#T##CGRect#&gt;, style: &lt;#T##UITableViewStyle#&gt;) \t\tmainTableView.dataSource = self \t\tmainTableView.delegate = self \t\tmainTableView.tableFooterView = UIView() \t\tmainTableView.separatorStyle = .none \t\treturn mainTableView \t&#125;() \n """ return result &#125; fileprivate func insertEndCode(_ className:String) -&gt; [String] &#123; let result = """ \n extension \(className): UITableViewDataSource, UITableViewDelegate &#123; \t// MARK: - UITableViewDataSource \tfunc tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123; \t\t&lt;#code#&gt; \t&#125; \tfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123; \t\t&lt;#code#&gt; \t&#125; \tfunc numberOfSections(in tableView: UITableView) -&gt; Int &#123; \t\t&lt;#code#&gt; \t&#125; \t// MARK: - UITableViewDelegate \tfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) &#123; \t\t&lt;#code#&gt; \t&#125; \tfunc tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -&gt; CGFloat &#123; \t\t&lt;#code#&gt; \t&#125; &#125; """ return [result] &#125; 4.3 功能实现123456789101112131415161718192021222324252627func perform(with invocation: XCSourceEditorCommandInvocation, completionHandler: @escaping (Error?) -&gt; Void ) -&gt; Void &#123; // Implement your command here, invoking the completion handler when done. Pass it nil on success, and an NSError on failure. // 获取光标所在位置的范围 let selection = invocation.buffer.selections.firstObject as? XCSourceTextRange // 当前文件每行显示的内容 let lines = invocation.buffer.lines let linesStr = lines.map&#123;$0 as! String&#125; guard selection != nil else &#123; completionHandler(nil) return &#125; // 获取类名 let ownfileName = fileName(selection: selection!, comment: linesStr) // 插入代码 var lines.insert(insertVarCode(), at: selectionFileName(selection: selection!, comment: linesStr).classLine) // 光标处 插入代码 lines.insert(insertSelectionCode(), at: selection!.end.line) // 尾部拼接代理 if ownfileName != nil &#123; lines.addObjects(from: insertEndCode(ownfileName!)) &#125; completionHandler(nil)&#125; 5. 打包DMG5.1 获取app所在文件位置 5.2 左边新建文件夹,把app和Applications替身文件夹放入其中 5.3 打包DMG 选择上面新建的文件夹，然后打开。会在文件夹中生成dmg 6. 使用6.1 把app 拖入Applications文件夹放入其中6.2 运行app6.3 然后，打开“系统偏好设置” -&gt; “扩展” -&gt; “Xcode Source Editor” -&gt; 确认插件名字前已打钩 6.4 退掉Xcode,重新运行 6.5 设置快捷键 Xcode -&gt; “Preferences” -&gt; “Key Bindings” -&gt; 搜索插件名字 -&gt; 添加对应的快捷键: 6.6 插件删除 直接把app移到废纸楼即可 7 Demo地址Demo 8 其他Xcode Source Editor ExtensionAwesome native Xcode extensions]]></content>
  </entry>
  <entry>
    <title><![CDATA[WKWebView与JS交互]]></title>
    <url>%2FiOS%2FWKWebView%E4%B8%8EJS%E4%BA%A4%E4%BA%92%2F</url>
    <content type="text"><![CDATA[开发工具:Xcode9 语言:Swift4 系统环境:ipad ios10+ 1.修改背景色1webView.evaluateJavaScript("document.getElementsByTagName('body')[0].style.background = '#B0C4DE'", completionHandler: nil) 2.图片放大 遍历所有图片，width是按照当前webView的宽度比例,height = &#39;auto&#39;按照width自适应 12345678webView.evaluateJavaScript( """ for (var j=0;j&lt;document.images.length;j++) &#123; document.images[j].style.width = '50%'; document.images[j].style.height = 'auto'; &#125; """ , completionHandler: nil) 3.字体放大 iphone通常字体放大使用webkitTextSizeAdjust整体放大，但是此方法在iPad上不能使用。 3.1 iPhone字体放大1webView.evaluateJavaScript("document.getElementsByTagName('body')[0].style.webkitTextSizeAdjust= '200%'", completionHandler: nil) 3.2 iPad字体放大1webView.evaluateJavaScript("document.getElementsByTagName('body')[0].style.fontSize = '200%'", completionHandler: nil) 特殊情况,当&lt;span style=\&quot;font-size: 18px;\&quot;&gt;设置了字体大小document.getElementsByTagName(&#39;body&#39;)[0].style.fontSize并不能去改变其字体大小.如要重新设置12345678// 所有span标签字体放大webView.evaluateJavaScript( """ for (var j=0;j&lt;document.getElementsByTagName('span').length;j++) &#123; document.getElementsByTagName('span')[j].style.fontSize = '100%'; &#125; """ , completionHandler: nil) 4. 禁止缩放 禁止WKWebView手势缩放1234567webView.evaluateJavaScript( """ var script = document.createElement('meta'); script.name = 'viewport';script.content=\"user-scalable=no\"; document.getElementsByTagName('head')[0].appendChild(script); """ , completionHandler: nil) 5. 初始化页面大小12345678webView.evaluateJavaScript( """ var script = document.createElement('meta'); script.name = 'viewport'; script.content=\"width=device-width, initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\"; document.getElementsByTagName('head')[0].appendChild(script); """, completionHandler: nil) 标签里的scale值就是页面的初始化页面大小,&lt; initial-scale &gt;和可伸缩放大最大&lt; maximum-scale &gt;和最小&lt; minimum-scale &gt;的的倍数,&lt;user-scalable&gt;是否支持缩放,如果还有别的需求可自行设置,如果都为1表示初始化的时候显示为原来大小,可缩放的大小都为原来的大小&lt;即不可缩放&gt;。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-Next-问题总结]]></title>
    <url>%2FHexo%2FHexo-Next-%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[1.写作问题1.1hexo的NexT主题，取消“文章目录”对标题的自动编号 主题配置文件 ,搜索关键字number设为false123456# Table Of Contents in the Sidebartoc: enable: true # Automatically add list number to toc. number: false 1.2侧边栏的文章目录显示错误 比如一级 为 #标识 ,那么二级就用 ##,不能用三级 ### 1.3 在post.md配置的信息不起作用 新建文章写法: hexo new post &quot;your title&quot; 2.压缩问题 gulp 压缩 js 报错 是因为以后缀名为min.js的文件,无法进行压缩,修改如下123456// 压缩public目录下的所有js gulp.task('minify-js', function() &#123; return gulp.src(['./public/**/.js','!./public/js/**/*min.js']) .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;); 3.繁琐的hexo clean、hexo g、hexo d 打开 站点配置文件 下的package.json文件，添加如下代码 12345"scripts": &#123; "build": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d", "test": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s", "dev": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s"&#125; 命令行输入 npm run build ： 清除本地数据-&gt;静态编译-&gt;压缩-&gt;上传 命令行输入 npm run test ： 清除本地数据-&gt;静态编译-&gt;压缩-&gt;开启本地服务器 命令行输入 npm run dev ： 清除本地数据-&gt;静态编译-&gt;上传 4.GitHub仓库README问题 在站点根目录下的source文件夹内添加README.md，然后重新上传]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题优化(四)]]></title>
    <url>%2FHexo%2FNext%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[1.添加Google统计 访问Google Analytics,需要登录,按照提示填写网站信息开通GA服务，获取统计ID。 编辑 主题配置文件 , 找到关键字google_analytics , 删除注释#并填写获取到的统计ID1google_analytics: your-analytics-id 2.开启不蒜子博客访问量统计 编辑 主题配置文件 , 找到关键字busuanzi_count1234567891011121314151617# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 访问人数 site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 总访问量 site_pv_footer: # custom pv span for one page only page_pv: true page_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 阅读次数 page_pv_footer: 3.添加分享功能 我选择的是AddThis作为博客的第三方分享。AdThis是国外的第三方分享,使用方便,可以用google直接登录。能自定义分享样式 3.1 注册AddThis，选择分享按钮： 3.2 选择显示样式(Select a Tool Type),AddThis提供了7种显示样式,你可以更加左边菜单栏点击,右边会自动显示你选择的相应样式。值得注意的是。在其右上角可以切换PC和Phone显示 3.3 点击Continue配置分享按钮,注意：不同的风格样式,配置方式不同 3.4 配置完成后 , 获取代码ID , 在js代码中获取pubid后面的ID 3.5 编辑 主题配置文件 , 找到关键字add_this_id, 添加pubid4.添加文章书写样式4.1 文字增加背景色块 站点配置文件 主题配置文件 站点配置文件 主题配置文件 打开themes/next/source/css/_custom 下的 custom.styl 文件,添加属性样式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556// 颜色块-黄span#inline-yellow &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #f0ad4e;&#125;// 颜色块-绿span#inline-green &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #5cb85c;&#125;// 颜色块-蓝span#inline-blue &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #2780e3;&#125;// 颜色块-紫span#inline-purple &#123;display:inline;padding:.2em .6em .3em;font-size:80%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:0;background-color: #9954bb;&#125; 在你需要编辑的文章地方。放置如下代码 站点配置文件 &lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt; 主题配置文件 &lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt; 站点配置文件 &lt;span id=&quot;inline-yellow&quot;&gt; 站点配置文件 &lt;/span&gt; 主题配置文件 &lt;span id=&quot;inline-green&quot;&gt; 主题配置文件 &lt;/span&gt; 4.2下载样式 Download Now 打开themes/next/source/css/_custom 下的 custom.styl 文件,添加属性样式 1234567891011121314a#download &#123;display: inline-block;padding: 0 10px;color: #000;background: transparent;border: 2px solid #000;border-radius: 2px;transition: all .5s ease;font-weight: bold;&amp;:hover &#123;background: #000;color: #fff;&#125;&#125; 在你需要编辑的文章地方。放置如下代码 Download Now &lt;a id=&quot;download&quot; href=&quot;https://git-scm.com/download/win&quot;&gt;&lt;i class=&quot;fa fa-download&quot;&gt;&lt;/i&gt;&lt;span&gt; Download Now&lt;/span&gt; &lt;/a&gt; 4.3 在文档中增加图标, Font Awesome 提供图标 支持Markdown &lt;i class=&quot;fa fa-pencil&quot;&gt;&lt;/i&gt;支持Markdown 5.添加Disqus评论系统 Disqus注册很简单，主要是获取Shortname 编辑 主题配置文件 , 找到关键字disqus 12345# Disqusdisqus: enable: true shortname: you-shortname count: true 6.绑定godaddy域名 Note:这里讲的是Github绑定godaddy域名。 提示：如果你想好好的搭建个人博客,那么建议你在国内购买域名和主机(腾讯或者阿里都可以,看你个人喜好)。优点：访问速度快，百度抓取方便。毕竟一分钱一分货。缺点:主机价格太贵，购买域名和主机需要实名认证和报备,很麻烦，而且报备需要等3-5天。如果你只是打算玩玩，试试水，为后期准备，那么建议里在godaddy购买域名,购买信息你随便填写。Github上托管博客。优点：方便，不用实名认证和报备。价格便宜，只需要购买域名即可。还可以练手,可随时弃坑。缺点：访问速度较慢。需要你自己把控blog安装的插件。Github屏蔽了百度抓取，处理比较麻烦。 6.1打开终端,ping你的github.io获取ip地址1$ ping your.github.io 6.2进入你的域名DNS管理，修改信息 6.3设置GitHub 7.如果你觉得godaddy麻烦，可以用dnspod托管你的域名7.1 注册，dnspod是腾讯的,可以使用QQ直接注册登录7.2 域名解析 7.3 根据域名解析，配置 8.SEO 优化8.1 需要安装两个插件来生成 sitemap 文件，前一个是传统的 sitemap，后一个是百度的 sitemap(如果你blog托管在GitHub,并且，若果你不想在多花钱弄百度抓取，可以不用安装百度的 sitemap)12npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 8.2 编辑 站点配置文件 , 文件末尾添加：1234sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 8.3 编辑 站点配置文件 , 搜索关键字url,并修改url123456# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://yoursite.comroot: /permalink: :category/:title/permalink_defaults: 8.4 添加蜘蛛协议 在站点source文件夹下新建robots.txt文件，文件内容如下: 123456789101112131415User-agent: *Allow: /Allow: /archives/Allow: /tags/Allow: /categories/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: http://yoursite.com/sitemap.xmlSitemap: http://yoursite.com/baidusitemap.xml Allow字段的值即为允许搜索引擎爬区的内容，/表示网站首页，/categories/为分类页面，如果菜单栏还有其他选项都可以按照格式自行添加。 8.5 提交站点到 Google8.5.1 打开 Google Search Console，添加博客地址。并进行相关验证,根据提示即可完成认证,认证成功如下： 8.5.2 验证通过后点进入控制台测试robots.txt文件,没有错误和警告即可 8.5.3 提交 sitemap.xml 文件，点击右上角添加/测试站点地图输入 sitemap.xml 进行测试，测试无误后再提交文件 8.5.4 robots.txt验证和sitemap.xml验证通过，抓取网页 输入框留空表示抓取首页，填入 about 表示抓取关于页面，抓取完成后,抓取因为验证原因,可能会有几种状态：完成、部分完成和已重定向等，不过无需担心，这些状态并不会影响提交。此时点击请求编入索引即可，至此博客就成功提交到了 Google 8.5.5 验证站点是否被收录 谷歌中输入：site:yousite，会有提示：(抓取需要时间。等几分钟) 8.6 提交站点到 BaiDu 如果你是github上部署的blog，百度是不能直接爬去到你的网站的。现最简单实惠的办法是搭建CDN.相关文章:如何解决百度爬虫无法爬取搭建在Github上的个人博客的问题？ 8.6.1 进入百度站长管理，单击站点管理，添加网站，进行认证 8.6.2 HTML标签认证 打开themes/next/layout/_partials/head.swig文件，搜索baidu_site_verification替换复制的内容 12&#123;% if theme.baidu_site_verification %&#125; &lt;meta name=&quot;baidu-site-verification&quot; content=&quot;9v8CMO9Qh8&quot; /&gt;&#123;% endif %&#125; 主题配置文件 ， 添加代码如下 1baidu_site_verification: true 然后 123hexo cleanhexo ghexo d 然后点击完成验证 8.6.4 验证Robots文件是否生效 验证完成后，自己的网站会被提交，过段时间在百度中验证站点是否收录即可(一般为2-7天)]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题优化(三)]]></title>
    <url>%2FHexo%2FNext%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E4%B8%89%2F</url>
    <content type="text"><![CDATA[1.博文置顶 打开Hexo 站点下node_modules/hexo-generator-index/lib/generator.js文件。代码全部替换为：12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;; 打开文章添加top字段,设置数值，数值越大文章越靠前1234567---layout: layouttitle: 标签1date: 2017-08-18 15:41:18tags: 标签1top: 100--- 2.统计功能,显示文章字数统计,阅读时长,总字数 在Hexo 站点下 1$ npm i --save hexo-wordcount 打开 主题配置文件 ，搜索关键字post_wordcount 1234567891011# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true #字数统计 wordcount: true #预览时间 min2read: true #总字数，显示在页面底部 totalcount: false separated_meta: true 3.修改文章内文本连接样式 打开 themes/next/source/css/_custom/下的custom.styl,添加代码1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 4.每篇文章末尾统一添加本文结束标记 在路径/themes/next/layout/_macro中新建 passage-end-tag.swig 文件,并添加以下内容： 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;------ 本文结束------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 打开themes/next/layout/_macro/下的post.swig文件,添加： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125; &lt;/div&gt; 然后打开 主题配置文件 ,在末尾添加： 123# 文章末尾添加“本文结束”标记passage_end_tag:enabled: true 5.文章顶部显示更新时间 打开 主题配置文件 ,搜索关键字updated_at设置为true 123456# Post meta display settingspost_meta: item_text: true created_at: true updated_at: ture categories: true 编辑文章,增加关键字updated 12345---layout: layouttitle: 关于date: 2017-08-18 15:41:18updated: 2017-09-05 20:18:54 #手动添加更新时间 6.修改访问URL路径 默认情况下访问URL路径为：domain/2017/08/18/关于本站,修改为domain/About/关于本站 编辑 站点配置文件 ，修改其中的permalink字段1permalink: :category/:title/ 7.给代码块添加复制功能7.1 下载插件clipboard.js7.2 打开themes/next/source/lib/,新建文件夹clipboard7.3 把下载clipboard.js下的src文件夹下的文件拖动到clipboard文件夹下7.4 打开themes/next/source/js/src/,新建文件custom.js,代码如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102//此函数用于创建复制按钮function createCopyBtns() &#123; var $codeArea = $("figure table"); //查看页面是否具有代码区域，没有代码块则不创建 复制按钮 if ($codeArea.length &gt; 0) &#123; //复制成功后将要干的事情 function changeToSuccess(item) &#123; $imgOK = $("#copyBtn").find("#imgSuccess"); if ($imgOK.css("display") == "none") &#123; $imgOK.css(&#123; opacity: 0, display: "block" &#125;); $imgOK.animate(&#123; opacity: 1 &#125;, 1000); setTimeout(function() &#123; $imgOK.animate(&#123; opacity: 0 &#125;, 2000); &#125;, 2000); setTimeout(function() &#123; $imgOK.css("display", "none"); &#125;, 4000); &#125;; &#125;; //创建 全局复制按钮，仅有一组。包含：复制按钮，复制成功响应按钮 //值得注意的是：1.按钮默认隐藏，2.位置使用绝对位置 position: absolute; (position: fixed 也可以，需要修改代码) $(".post-body").before('&lt;div id="copyBtn" style="opacity: 0; position: absolute;top:0px;display: none;line-height: 1; font-size:1.5em"&gt;&lt;span id="imgCopy" &gt;&lt;i class="fa fa-paste fa-fw"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span id="imgSuccess" style="display: none;"&gt;&lt;i class="fa fa-check-circle fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;'); //创建 复制 插件，绑定单机时间到 指定元素，支持JQuery var clipboard = new Clipboard('#copyBtn', &#123; target: function() &#123; //返回需要复制的元素内容 return document.querySelector("[copyFlag]"); &#125;, isSupported: function() &#123; //支持复制内容 return document.querySelector("[copyFlag]"); &#125; &#125;); //复制成功事件绑定 clipboard.on('success', function(e) &#123; //清除内容被选择状态 e.clearSelection(); changeToSuccess(e); &#125;); //复制失败绑定事件 clipboard.on('error', function(e) &#123; console.error('Action:', e.action); console.error('Trigger:', e.trigger); &#125;); //鼠标 在复制按钮上滑动和离开后渐变显示/隐藏效果 $("#copyBtn").hover( function() &#123; $(this).stop(); $(this).css("opacity", 1); &#125;, function() &#123; $(this).animate(&#123; opacity: 0 &#125;, 2000); &#125; ); &#125;&#125;//感应鼠标是否在代码区$("figure").hover( function() &#123; //-------鼠标活动在代码块内 //移除之前含有复制标志代码块的 copyFlag $("[copyFlag]").removeAttr("copyFlag"); //在新的（当前鼠标所在代码区）代码块插入标志：copyFlag $(this).find(".code").attr("copyFlag", 1); //获取复制按钮 $copyBtn = $("#copyBtn"); if ($copyBtn.lenght != 0) &#123; //获取到按钮的前提下进行一下操作 //停止按钮动画效果 //设置为 显示状态 //修改 复制按钮 位置到 当前代码块开始部位 //设置代码块 左侧位置 $copyBtn.stop(); $copyBtn.css("opacity", 0.8); $copyBtn.css("display", "block"); $copyBtn.css("top", parseInt($copyBtn.css("top")) + $(this).offset().top - $copyBtn.offset().top + 3); $copyBtn.css("left", -$copyBtn.width() - 3); &#125; &#125;, function() &#123; //-------鼠标离开代码块 //设置复制按钮可见度 2秒内到 0 $("#copyBtn").animate(&#123; opacity: 0 &#125;, 2000); &#125;);//页面载入完成后，创建复制按钮$(document).ready(function() &#123; createCopyBtns();&#125;); 7.5 打开themes/next/layout/_custom/,新建文件custom.swig，代码如下:12&lt;script type="text/javascript" src="/lib/clipboard/clipboard.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="/js/src/custom.js"&gt;&lt;/script&gt; 7.6 修改文件themes/next/layout/_layout.swig,在标签&lt;/body&gt;上面插入代码:1&#123;% include &apos;_custom/custom.swig&apos; %&#125; 8.新建404界面 在Hexo 站点下,输入 hexo new page 404,默认在Hexo 站点下/source/404/index.md 打开新建的404界面，在顶部插入一行，写上permalink: /404，这表示指定该页固定链接为 http://&quot;主页&quot;/404.html 123456---title: #404 Not Found：该页无法显示date: 2017-09-06 15:37:18comments: falsepermalink: /404--- 如果你不想编辑属于自己的404界面,可以显示腾讯公益404界面,代码如下： 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow"/&gt; &lt;link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="回到我的主页"&gt; &lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"&gt;&lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 9.静态资源压缩 在Hexo 站点下 1$ npm install gulp -g 安装gulp插件 1234npm install gulp-minify-css --save // 压缩cssnpm install gulp-htmlmin --save // 压缩htmlnpm install gulp-htmlclean --save // 清理htmlnpm install gulp-uglify --save // 混淆js 在Hexo 站点下添加gulpfile.js文件，文件内容如下: 1234567891011121314151617181920212223242526272829303132333435363738394041var gulp = require('gulp');var minifycss = require('gulp-minify-css');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var uglify = require('gulp-uglify');// 压缩 public 目录 cssgulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true,//清除 HTML 注释 collapseWhitespace: true,//压缩 HTML collapseBooleanAttributes: true,//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input / removeEmptyAttributes: true,//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt; removeScriptTypeAttributes: true,//删除 &lt;script&gt; 的 type="text/javascript" removeStyleLinkTypeAttributes: true,//删除 &lt;style&gt; 和 &lt;link&gt; 的 type="text/css" minifyJS: true,//压缩页面 JS minifyCSS: true,//压缩页面 CSS minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩js文件gulp.task('minify-js', function() &#123; return gulp.src(['./public/**/.js','!./public/js/**/*min.js']) .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 执行 gulp 命令时执行的任务gulp.task('default', [ 'minify-html','minify-css','minify-js']); 添加自动部署命令在package.json里面添加如下命令： 1234"scripts": &#123;"build": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d","test": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s"&#125;, 然后运行npm run build，我们就会自动删除老文件，生成新文件，压缩html、css然后发布到github或其他静态服务器资源。 然后运行npm run test，我们就会自动删除老文件，生成新文件，压缩html、css然后发布到本地服务器做预览。 10.本地站点推送到GitHub上 在Hexo 站点下 1$ npm install hexo-deployer-git --save 在 站点配置文件 中配置deploy 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: &lt;repository url&gt; #your github.io.git branch: master $ hexo clean $ hexo d --g123hexo g # 生成本地 public 静态文件hexo d # 部署到 Github 上# 也可以缩写成：hexo g --d]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题优化(二)]]></title>
    <url>%2FHexo%2FNext%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[1.主页文章添加边框阴影效果 打开themes/next/source/css/_custom/下的custom.styl,向里面加代码:12345678// 主页文章添加阴影效果.post &#123; margin-top: 0px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 2.修改文章间分割线 打开themes/next/source/css/_common/components/post/下的post-eof.styl,修改:12345678910.posts-expand &#123; .post-eof &#123; display: block; // margin: $post-eof-margin-top auto $post-eof-margin-bottom; width: 0%; //分割线长度 height: 0px; // 分割线高度 background: $grey-light; text-align: center; &#125;&#125; 3.代码块自定义样式代码块 打开themes/next/source/css/_custom/下的custom.styl,向里面加代码(颜色可以自己定义)123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 边框的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 4.开启版权声明 主题配置文件 ,搜索关键字post_copyright,enable改为true12345# Declare license on postspost_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 5.自定义文章底部版权声明 5.1在目录 themes/next/layout/_macro/下添加 my-copyright.swig,内容如下:123456789101112131415161718192021222324252627282930313233&#123;% if page.copyright %&#125;&lt;div class="my_post_copyright"&gt; &lt;script src="//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"&gt;&lt;/script&gt; &lt;!-- JS库 sweetalert 可修改路径 --&gt; &lt;script type="text/javascript" src="http://jslibs.wuxubj.cn/sweetalert_mini/jquery-1.7.1.min.js"&gt;&lt;/script&gt; &lt;script src="http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.min.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" type="text/css" href="http://jslibs.wuxubj.cn/sweetalert_mini/sweetalert.mini.css"&gt; &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:mm:ss") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:mm:ss") &#125;&#125;&lt;/p&gt; &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href="&#123;&#123; url_for(page.path) &#125;&#125;" title="&#123;&#123; page.title &#125;&#125;"&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt; &lt;span class="copy-path" title="点击复制文章链接"&gt;&lt;i class="fa fa-clipboard" data-clipboard-text="&#123;&#123; page.permalink &#125;&#125;" aria-label="复制成功！"&gt;&lt;/i&gt;&lt;/span&gt; &lt;/p&gt; &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class="fa fa-creative-commons"&gt;&lt;/i&gt; &lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" title="Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt; &lt;/div&gt;&lt;script&gt; var clipboard = new Clipboard('.fa-clipboard'); clipboard.on('success', $(function()&#123; $(".fa-clipboard").click(function()&#123; swal(&#123; title: "", text: '复制成功', html: false, timer: 500, showConfirmButton: false &#125;); &#125;); &#125;)); &lt;/script&gt;&#123;% endif %&#125; 5.2在目录themes/next/source/css/_common/components/post/下添加my-post-copyright.styl,内容如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445.my_post_copyright &#123; width: 85%; max-width: 45em; margin: 2.8em auto 0; padding: 0.5em 1.0em; border: 1px solid #d3d3d3; font-size: 0.93rem; line-height: 1.6em; word-break: break-all; background: rgba(255,255,255,0.4);&#125;.my_post_copyright p&#123;margin:0;&#125;.my_post_copyright span &#123; display: inline-block; width: 5.2em; color: #333333; // title color font-weight: bold;&#125;.my_post_copyright .raw &#123; margin-left: 1em; width: 5em;&#125;.my_post_copyright a &#123; color: #808080; border-bottom:0;&#125;.my_post_copyright a:hover &#123; color: #0593d3; // link color text-decoration: underline;&#125;.my_post_copyright:hover .fa-clipboard &#123; color: #000;&#125;.my_post_copyright .post-url:hover &#123; font-weight: normal;&#125;.my_post_copyright .copy-path &#123; margin-left: 1em; width: 1em; +mobile()&#123;display:none;&#125;&#125;.my_post_copyright .copy-path:hover &#123; color: #808080; cursor: pointer;&#125; 5.3 修改themes/next/layout/_macro/post.swig,在代码如下12345&#123;% if theme.wechat_subscriber.enabled and not is_index %&#125; &lt;div&gt; &#123;% include &apos;wechat-subscriber.swig&apos; %&#125; &lt;/div&gt; &#123;% endif %&#125; 之前添加增加如下代码：12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include &apos;my-copyright.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 修改themes/next/source/css/_common/components/post/post.styl文件，在最后一行增加代码：1@import &quot;my-post-copyright&quot; 5.4设置新建文章自动开启copyright,即新建文章自动显示自定义的版权声明,设置your site/scaffolds/post.md文件12345678---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:type: &quot;categories&quot;categories:copyright: true #新增,开启--- 6.在右上角或者左上角实现fork me on github 选择样式GitHub Ribbons,修改图片跳转链接,并复制文本框中的代码 打开themes/next/layout/下的_layout.swig文件，把代码复制到&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下面 7.修改文章底部的那个带#号的标签 打开themes/next/layout/_macro/下的post.swig文件,搜索rel=&quot;tag&quot;&gt;#,将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;12345&lt;div class="post-tags"&gt; &#123;% for tag in post.tags %&#125; &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;&lt;i class="fa fa-tag"&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125;&lt;/div&gt; 8.添加顶部加载条 打开 主题配置文件 ，搜索关键字pace,设置为true,可以更换加载样式12345678910111213141516171819# Progress bar in the top during page loading.pace: true# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-flash #替换更换样式 9.本地搜索 在你Hexo 站点下 1$ npm install hexo-generator-searchdb --save 打开 站点配置文件 ,添加配置 12345search: path: search.xml field: post format: html limit: 10000 打开 主题配置文件 ,搜索关键字local_search,设置为true 123456789# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1 10.修改网页底部 10.1在图标库中找到你自己喜欢的图标, 修改桃心,打开 主题配置文件 ,搜索关键字authoricon,替换图标名12# icon between year and author @Footerauthoricon: id-card 10.2隐藏网页底部Hexo 强力驱动 打开 主题配置文件 ,搜索关键字copyright12# Footer `powered-by` and `theme-info` copyrightcopyright: false]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题优化(一)]]></title>
    <url>%2FHexo%2FNext%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[1.常用命令 Hexo的命令极简单，安装后只需要记住四个常用的即可。执行命令需要Git当前处于blog文件夹根目录下。 generate 生成静态文件。 1$ hexo g server 启动服务器。 1$ hexo s deploy 部署网站。部署网站前，需要预先生成静态文件。 1$ hexo d clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 1$ hexo clean 卸载Hexo 1$ npm uninstall hexo-cli -g 2.更换主题,以Next主题为例12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 修改 站点配置文件 下的主题1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 3.站点初始设置 打开 站点配置文件 1234567# Sitetitle: Hexo #网站标题subtitle: #网站副标题description: #网站描述author: author #您的名字language: zh-Hans #网站使用的语言timezone: Asia/Shanghai #网站时区。Hexo 默认使用您电脑的时区。 4.设置主题风格 打开 主题配置文件 ,搜索 scheme关键字，将你需用启用的scheme 前面注释 # 去除即可。123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Muse # 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白#scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观scheme: Pisces # 双栏 Scheme，小家碧玉似的清新#scheme: Gemini # 类似 Pisces 5.设置菜单项的显示文本和图标 NexT 使用的是 Font Awesome 提供的图标， Font Awesome提供了600+的图标，可以满足绝大的多数的场景，同时无须担心在Retina屏幕下 图标模糊的问题。 5.1设置菜单项的显示文本 打开themes/next/languages下的zh-Hans.yml文件,搜索 menu关键字，修改对应中文或者新增 123456789101112menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益404 # 新增menu catalogue: 目录 5.2设定菜单项的图标 打开 主题配置文件 ，搜索 menu_icons关键字，修改对应图标名称或者新增对应menu的图标 123456789101112131415161718# Enable/Disable menu icons.# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of menu item and value is the name of FontAwesome icon. Key is case-senstive.# When an question mask icon presenting up means that the item has no mapping icon.menu_icons: enable: true #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome home: home about: user categories: th schedule: calendar tags: tags archives: archive sitemap: sitemap commonweal: heartbeat #新增menu_icon catalogue: th-list 5.3设置菜单项对应的文件目录 打开 主题配置文件 ,以#注释原有的菜单项，或者新增新的菜单项 123456789101112131415# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)menu: home: / categories: /categories/ #about: /about/ archives: /archives/ #tags: /tags/ #sitemap: /sitemap.xml #commonweal: /404/ #新增menu catalogue: /catalogues/ 5.4创建菜单项对应文件目录,以分类为例 除了home，archives,/后面都需要手动创建这个页面 在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories 12$ cd your-hexo-site$ hexo new page categories 5.5编辑刚新建的页面,设置分类12345title: 分类date: 2014-12-22 12:39:04type: &quot;categories&quot;categories: Testing #分类名--- 6.头像设置 6.1添加头像 打开 主题配置文件 ，搜索 Sidebar Avatar关键字，去掉avatar前面的# 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.jpg# in site directory(source/uploads): /uploads/avatar.jpgavatar: http://example.com/avatar.png 或者使用本地图片,把图片放入themes/next/source/images下,修改avatar 1avatar: /images/blogLogo.png 6.2设置头像边框为圆形框 打开位于themes/next/source/css/_common/components/sidebar/下的sidebar-author.syl文件,修改如下123456789101112.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; // 修改头像边框 border-radius: 50%; -webkit-border-radius: 50%; -moz-border-radius: 50%;&#125; 6.3特效：鼠标放置头像上旋转123456789101112131415161718192021.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; // 修改头像边框 border-radius: 50%; -webkit-border-radius: 50%; -moz-border-radius: 50%; // 设置旋转 transition: 1.4s all;&#125;// 可旋转的圆形头像,`hover`动作.site-author-image:hover &#123; -webkit-transform: rotate(360deg); -moz-transform: rotate(360deg); -ms-transform: rotate(360deg); -transform: rotate(360deg);&#125; 7.显示当前浏览进度 打开 主题配置文件 ,搜索关键字scrollpercent,把false改为true 12# Scroll percent label in b2t buttonscrollpercent: true 如果想把top按钮放在侧边栏,打开 主题配置文件 ,搜索关键字b2t,把false改为true 12345# Back to top in sidebar b2t: true # Scroll percent label in b2t button scrollpercent: true 8.文章创建和删除 创建文章 12$ cd you-site$ hexo new post &quot;you title&quot; 文章目录you-site/source/_posts 删除文章 123$ hexo clean在/source/_posts/中直接删除了相应的.md文件$ hexo g 9.标签设置 9.1创建标签目录 hexo初始是没有标签目录的需要自己创建 12$ cd you-site$ hexo new page tags 创建完成后,打开you-site/source/tags的index.md,修改如下 12345---title: #页面主题date: 2017-08-18 15:00:55 #当前创建文件时间type: &quot;tags&quot; # 设置页面类型--- 得到如下界面 9.2设置标签云 标签云的生成:是根据你创建的文章，设定标签类型，自定生成的。某个标签下的 文章越多则，标签越高大 设置文章标签:打开you-site/source/_posts的you title.md,默认tags:为空,后面加上标签名即可1234567---layout: layouttitle: 标签1date: 2017-08-18 15:41:18tags: 标签1 #此文章在`标签1 `标签下#tags: [标签1,标签2] #此文章在`标签1,标签2`下--- 10.侧边栏设置10.1设置侧边栏社交链接 打开 主题配置文件 ,搜索关键字social,然后添加社交站点名称与地址即可。12345678# Social linkssocial: GitHub: https://github.com/your-user-name Twitter: https://twitter.com/your-user-name Weibo: https://weibo.com/your-user-name douban: https://douban.com/people/your-user-name zhihu: https://www.zhihu.com/people/your-user-name # 等等 10.2设置侧边栏社交图标 打开 主题配置文件 ,搜索关键字social_icons，添加社交站点名称（注意大小写）图标，Font Awesome图标地址 12345678social_icons: enable: true # Icon Mappings. # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome GitHub: github Twitter: twitter Weibo: weibo Linkedin: linkedin 10.3RSS 在你Hexo 站点目录下 1$ npm install hexo-generator-feed --save 打开 站点配置文件 ,添加如下配置 12345678# feed# Dependencies: https://github.com/hexojs/hexo-generator-feedfeed: type: atom path: atom.xml limit: 20 hub: content: 10.4友情链接 打开 主题配置文件 ,搜索关键字Blog rolls1234567# Blog rollslinks_title: 友情链接 #标题links_layout: block #布局，一行一个连接#links_layout: inlinelinks: #连接 baidu: http://example.com/ google: http://example.com/]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[书写样式]]></title>
    <url>%2Fwriting%2F%E6%96%87%E7%AB%A0%E4%B9%A6%E5%86%99%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[1.文本居中引用立志飞龙腾空起 创学彩凤因云翔 2.文字居中显示这一行需要居中 3.Bootstrap Calloutdefault primary success info warning danger 4.文字增加背景色块 站点配置文件 主题配置文件 站点配置文件 主题配置文件 5.下载样式 Download Now 6.在文档中增加图标 支持MarkdownHexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。 一件部署只需一条指令即可部署到Github Pages，或其他网站 丰富的插件Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。]]></content>
      <categories>
        <category>writing</category>
      </categories>
      <tags>
        <tag>写作技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于本站]]></title>
    <url>%2FAbout%2F%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%AB%99%E7%82%B9%2F</url>
    <content type="text"><![CDATA[主题 — NexT.Pisces NexT版本: 5.1.2 2017-08-18 站点创建 2017-08-19 站点开始优化 2017-09-05 新增1.新增每篇文章更新时间,updated,改为文章底部显示2.修改访问URL路径,domain/2017/08/18/关于本站-&gt;domain/About/关于本站 2017-09-06 优化1.优化分类标签,修复侧边栏分类不能点击2.新增404界面3.自定义代码块样式4.自定义文章底部版权信息5.新增代码块复制功能 2017-09-07 新增文章《书写样式》 2017-09-08 站点发布到GitHub 2017-09-111.新增《Next主题优化(一)》2.新增《Next主题优化(二)》3.新增《Next主题优化(三)》4.修复文章底部版权信息,显示更新时间错误 2017-09-121.添加Google Analytics2.添加不蒜子3.购买域名4.绑定新域名5.修复gulp压缩js 错误,新增静态文件自动压缩6.新增分享、评论7.seo优化\sitemap 2017-09-261.关闭评论2.新增《Next主题优化(四)》3.添加快捷键 1234&quot;scripts&quot;: &#123; &quot;build&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d&quot;, &quot;test&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo s&quot;&#125; npm run build npm run test 2017-10-161.新增《Hexo-Next-问题总结》 2017-10-241.新增《WKWebView与JS交互》 2017-11-071.新增《Xcode Source Editor Extension》]]></content>
      <categories>
        <category>About</category>
      </categories>
      <tags>
        <tag>关于</tag>
      </tags>
  </entry>
</search>
